const { default: axios } = require('axios');
const redis = require('redis');
var express = require('express');
var router = express.Router();

// create and connect redis client to local instance.
const redisClient = redis.createClient();

// Print redis errors to the console
redisClient.on('error', (err) => {
  console.log("Error " + err);
});

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Twitter Analyser' });
});

/* GET search page. */
router.get('/search/', function(req, res, next) {
  console.log(req.query.topic);
  const topic = req.query.topic;

  const redisKey = `twitter:${topic}`;

  // Try the cache
  return redisClient.get(redisKey, (err, result) => {
  
    // If that key exist in Redis store
    if (result) {
      const resultJSON = JSON.parse(result);
      console.log("Served from Redis");
      res.render('index', { title: 'Twitter Analyser', topic : JSON.stringify(resultJSON) });
      
    } else { // Key does not exist in Redis store 
      // Set Bearer Token authorisation and url (code generated by postman)
      var config = {
        method: 'get',
        url: ('http://api.twitter.com/2/tweets/search/recent?query=' + topic),
        headers: { 
          'Authorization': 'Bearer AAAAAAAAAAAAAAAAAAAAABpxUwEAAAAAdDYRJVcOC7COTE47xw1zPLiYSPI%3D5QMpEEW3iHzXaMduYOWW0JNwxw0dj1oo6M3lOEapfn4lHMeeF2'
        }
      };
      // Get response from twitter API
      axios(config)
        .then( (response) => {
          return response.data;
        })
        .then( (rsp) => { 
          var result = JSON.stringify(rsp);
          redisClient.setex(`twitter:${topic}`, 3600, JSON.stringify({ source: 'Redis Cache', ...rsp, }));
          res.render('index', { title: 'Twitter Analyser', topic : result });
        })
        .catch((error) => {
          console.error(error);
      })
    }
    
  });

});

module.exports = router;
